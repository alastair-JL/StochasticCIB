if(dieRoll>=0){
passes=passes+1;
}else{
passes=0;
bob[aaa]=bob[aaa]+1;
}
}
}
for( aaa in 1:5000){
passes=0;
while( passes<2 && joe[aaa]<10){
dieRoll= sample(dice,1)+Fort-DC;
if(dieRoll>=0){
passes=passes+1;
}else{
joe[aaa]=joe[aaa]+1;
}
}
}
hist(joe+0.1)
DC=15;
Fort=3;
bob=0*(1:5000)
joe=0*(1:5000)
passes=0;
dice= 1:20
for( aaa in 1:5000){
passes=0;
while( passes<2 && bob[aaa]<10){
dieRoll= sample(dice,1)+Fort-DC;
if(dieRoll>=0){
passes=passes+1;
}else{
passes=0;
bob[aaa]=bob[aaa]+1;
}
}
}
for( aaa in 1:5000){
passes=0;
while( passes<2 && joe[aaa]<10){
dieRoll= sample(dice,1)+Fort-DC;
if(dieRoll>=0){
passes=passes+1;
}else{
joe[aaa]=joe[aaa]+1;
}
}
}
hist(joe+0.1)
DC=20;
Fort=3;
bob=0*(1:5000)
joe=0*(1:5000)
passes=0;
dice= 1:20
for( aaa in 1:5000){
passes=0;
while( passes<2 && bob[aaa]<10){
dieRoll= sample(dice,1)+Fort-DC;
if(dieRoll>=0){
passes=passes+1;
}else{
passes=0;
bob[aaa]=bob[aaa]+1;
}
}
}
for( aaa in 1:5000){
passes=0;
while( passes<2 && joe[aaa]<10){
dieRoll= sample(dice,1)+Fort-DC;
if(dieRoll>=0){
passes=passes+1;
}else{
joe[aaa]=joe[aaa]+1;
}
}
}
hist(joe+0.1)
DC=20;
Fort=6;
bob=0*(1:5000)
joe=0*(1:5000)
passes=0;
dice= 1:20
for( aaa in 1:5000){
passes=0;
while( passes<2 && bob[aaa]<10){
dieRoll= sample(dice,1)+Fort-DC;
if(dieRoll>=0){
passes=passes+1;
}else{
passes=0;
bob[aaa]=bob[aaa]+1;
}
}
}
for( aaa in 1:5000){
passes=0;
while( passes<2 && joe[aaa]<10){
dieRoll= sample(dice,1)+Fort-DC;
if(dieRoll>=0){
passes=passes+1;
}else{
joe[aaa]=joe[aaa]+1;
}
}
}
hist(joe+0.1)
Factors<= list()
Factors= list()
length("bob")
size("bob")
Factors= list()
Descriptors= list()
NumDescripts = list()
newWord=""
while(is.empty(newWord, trim = TRUE, ...)){
newWord <- readline(prompt="Name your first Factor: ")
}
Factors<- Factors.append(newWord);
while(~is.empty(newWord, trim = TRUE, ...)){
newWord <- readline(prompt="Name your next Factor (press enter while blank if finished): ")
Factors<- Factors.append(newWord);
}
Factors= list()
Descriptors= list()
NumDescripts = list()
newWord=""
while(is.empty(newWord, trim = TRUE)){
newWord <- readline(prompt="Name your first Factor: ")
}
Factors<- Factors.append(newWord);
while(~is.empty(newWord, trim = TRUE)){
newWord <- readline(prompt="Name your next Factor (press enter while blank if finished): ")
Factors<- Factors.append(newWord);
}
Factors= list()
Descriptors= list()
NumDescripts = list()
newWord=""
while(is.empty(newWord, trim = TRUE)){
newWord <- readline(prompt="Name your first Factor: ")
}
Factors<- Factors.append(newWord);
while(!is.empty(newWord, trim = TRUE)){
newWord <- readline(prompt="Name your next Factor (press enter while blank if finished): ")
Factors<- Factors.append(newWord);
}
is.empty("")
Factors= list()
Descriptors= list()
NumDescripts = list()
newWord=""
while( newWord==""){
newWord <- readline(prompt="Name your first Factor: ")
}
while(newWord!=""){
newWord <- readline(prompt="Name your next Factor (press enter while blank if finished): ")
Factors<- list.append(Factors,newWord);
}
Factors<-head(Factors, -1)
Factors= list()
Descriptors= list()
NumDescripts = list()
newWord=""
while( newWord==""){
newWord <- readline(prompt="Name your first Factor: ")
}
while(newWord!=""){
newWord <- readline(prompt="Name your next Factor (press enter while blank if finished): ")
Factors<- append(Factors,newWord);
}
Factors<-head(Factors, -1)
while( newWord==""){
newWord <- readline(prompt="Name your first Factor: ")
}
Factors= list()
Descriptors= list()
NumDescripts = list()
newWord=""
while( newWord==""){
newWord <- readline(prompt="Name your first Factor: ")
}
while(newWord!=""){
newWord <- readline(prompt="Name your next Factor (press enter while blank if finished): ")
Factors<- append(Factors,newWord);
}
Factors
Factors<-head(Factors, -1)
Factors[1]
CIB.setUp <- function(){
Factors= list()
Descriptors= list()
NumDescripts = list()
newWord=""
while( newWord==""){
newWord <- readline(prompt="Name your first Factor: ")
}
Factors<- append(Factors,newWord);
while(newWord!=""){
newWord <- readline(prompt="Name your next Factor (press enter while blank if finished): ")
Factors<- append(Factors,newWord);
}
Factors<-head(Factors, -1)
for (factIndex in 1:length(Factors)) {
flavor<-list()
newWord=""
while( newWord==""){
newWord <- readline(prompt= paste("Name the first possible descriptor of ", Factors[factIndex]) )
}
flavor<- append(Factors,newWord);
while(newWord!=""){
newWord <- readline(prompt=paste("Name the next possible descriptor of ", Factors[factIndex], "(Leave blank when you are done)") )
flavor<- append(Factors,newWord);
}
flavor<-head(flavor, -1);
Descriptors<- append(Descriptors,flavor);
NumDescripts<-append(NumDescripts,length(flavor));
}
}
CIB.setUp()
CIB.setUp <- function(){
Factors= list()
Descriptors= list()
NumDescripts = list()
newWord=""
while( newWord==""){
newWord <- readline(prompt="Name your first Factor: ")
}
Factors<- append(Factors,newWord);
while(newWord!=""){
newWord <- readline(prompt="Name your next Factor (press enter while blank if finished): ")
Factors<- append(Factors,newWord);
}
Factors<-head(Factors, -1)
for (factIndex in 1:length(Factors)) {
flavor<-list()
newWord=""
while( newWord==""){
newWord <- readline(prompt= paste("Name the first possible descriptor of ", Factors[factIndex]) )
}
flavor<- append(Factors,newWord);
while(newWord!=""){
newWord <- readline(prompt=paste("Name the next possible descriptor of ", Factors[factIndex], "(Leave blank when you are done)") )
flavor<- append(Factors,newWord);
}
flavor<-head(flavor, -1);
Descriptors<- append(Descriptors,flavor);
NumDescripts<-append(NumDescripts,length(flavor));
}
return(List(Factors,Descriptors,NumDescripts) )
}
out<-CIB.setUp()
#' InputCibBanner
#'
#' A Zero-input function that will prompt the user to list their descriptors, along with the states associated with each descriptors. Useful for getting started with CIB.
#' @keywords CIB
#' @export
#' @note \code{\link{MakeScoreMatrix}} is probably the function you will need directly after this.
#' @return A list containing first a CIB matrix, and second a vector allowing the computer to more easily interpret said matrix.
#' @author Alastair Jamieson Lane. <aja107@@math.ubc.ca>
#' @examples
#' CIBobject<- InputCibBanner()
#' TransRelAdj<-MakeScoreMatrix(CIBobject)
#' Transitions<-LocalBoltzmann(CIBobject,TransRelAdj)
#' CIBforecast(Transitions)
#'
InputCibBanner <-function(){
fin=-1
panic=50;
CIBshape<- 0
DescriptorList<- c()
DescriptorBanner<- c()
StateList<- c()
input <- readline("What is the name of the first Descriptor?  ")
DescriptorList<-c(DescriptorList,input)
while(fin==-1  && panic>0){
input<-""
while(input=="" && panic>0){
input <- readline( paste("What is the name of the first state of ",DescriptorList[length(DescriptorList)] ,"?  " ,sep="") )
}
while(input!="" && panic>0){
StateList<- c(StateList,input)
DescriptorBanner<- c(DescriptorBanner,DescriptorList[length(DescriptorList)])
CIBshape[length(CIBshape)]<-CIBshape[length(CIBshape)]+1;
input <- readline( paste("What is the name of the next state for ",DescriptorList[length(DescriptorList)] ,"? (leave blank when done) "  ,sep="" ) )
panic=panic-1
}
input <- readline( paste("What is the next Descriptor you would like to add? (leave blank if no more descriptors)  ")  )
if(input==""){
fin=1
}else{
CIBshape=c(CIBshape,0)
DescriptorList<-c(DescriptorList,input)
}
}
frameNames<- paste(DescriptorBanner,StateList,sep="-")
CrossImpactMatrix<- mat.or.vec(length(StateList),length(StateList))
dimnames(CrossImpactMatrix) = list( frameNames,frameNames)
CrossImpactMatrix<-edit(CrossImpactMatrix)
ReturnList<- list(CrossImpactMatrix,CIBshape)
}
InputCibBanner()
CrossImpactMatrix
out<-CrossImpactMatrix()
out<-InputCibBanner()
out
data(antCIB)
TransRelAdj<-MakeScoreMatrix(antCIB)
Scores<-TransRelAdj[[2]]
Adjacency<-TransRelAdj[[3]]
clear
library(readr)
Ts <- read_csv("UtilityPrograms/MatlabScripts/2019/StochasticBurst/Ts.csv")
View(Ts)
library(readr)
Ts <- read_csv("UtilityPrograms/MatlabScripts/2019/StochasticBurst/Ts.csv",
col_names = FALSE)
View(Ts)
library(readr)
eps <- read_csv("UtilityPrograms/MatlabScripts/2019/StochasticBurst/eps.csv",
col_names = FALSE)
View(eps)
data.frame(eps,Ts, log(eps),log(Ts) )
df<-data.frame(eps,Ts, log(eps),log(Ts) )
View(df)
names(df)
names(df)<- c("eps","Ts","logEps","logTs")
lm(logTs~logEps,data=df)
df %>% filter(Tf > 0)
df %>% filter(Tf > 0)
df.Tf
df[Tf]
df
df[,2]>0
df[df[,2]>0,]
dfB<-df[df[,2]>0,]
lm(logTs~logEps,data=dfB)
-4/5
linmodel<-lm(logTs~logEps,data=dfB)
print(linmodel)
summary(linmodel)
dfC<-df[1:1000,]
linmodelC<-lm(logTs~logEps,data=dfC)
summary(linmodelC)
install.packages("devtools")
library("devtools")
install_github('alastair-JL/AnthroTools')
library(AnthroTools)
help("AnthroTools")
install.packages("devtools")
library("devtools")
install_github('alastair-JL/StochasticCIB')
library(StochasticCIB)
help("StochasticCIB")
install.packages("devtools")
help("StochasticCIB")
library(StochasticCIB)
help("StochasticCIB")
help("StochasticCIB")
CIBobject<- InputCibBanner()
CIBobject
CIBmat=CIBobject[1]
CIBmat
CIBmat=CIBobject(1)
CIBmat=CIBobject{1}
CIBmat=CIBobject[1]
CIBmat=CIBobject[[1]]
size(CIBmat)
CIBmat[1,1]
CIBmat[,]
CIBmat[1:4,1:4]
InputCibBanner <-function(){
fin=-1
panic=50;
CIBshape<- 0
DescriptorList<- c()
DescriptorBanner<- c()
StateList<- c()
input <- readline("What is the name of the first Descriptor?  ")
DescriptorList<-c(DescriptorList,input)
while(fin==-1  && panic>0){
input<-""
while(input=="" && panic>0){
input <- readline( paste("What is the name of the first state of ",DescriptorList[length(DescriptorList)] ,"?  " ,sep="") )
}
while(input!="" && panic>0){
StateList<- c(StateList,input)
DescriptorBanner<- c(DescriptorBanner,DescriptorList[length(DescriptorList)])
CIBshape[length(CIBshape)]<-CIBshape[length(CIBshape)]+1;
input <- readline( paste("What is the name of the next state for ",DescriptorList[length(DescriptorList)] ,"? (leave blank when done) "  ,sep="" ) )
panic=panic-1
}
input <- readline( paste("What is the next Descriptor you would like to add? (leave blank if no more descriptors)  ")  )
if(input==""){
fin=1
}else{
CIBshape=c(CIBshape,0)
DescriptorList<-c(DescriptorList,input)
}
}
frameNames<- paste(DescriptorBanner,StateList,sep="-")
CrossImpactMatrix<- mat.or.vec(length(StateList),length(StateList))
dimnames(CrossImpactMatrix) = list( frameNames,frameNames)
CrossImpactMatrix<-edit(CrossImpactMatrix)
CrossImpactMatrix<-CrossImpactMatrix[1:length(StateList),1:length(StateList)]
ReturnList<- list(CrossImpactMatrix,CIBshape)
}
CIBobject<- InputCibBanner()
CIBmat=CIBobject[[1]]
View(CIBmat)
CIBobject[[2]]
data(antCIB)
CIBmatrix<-antCIB[[1]]
CIBmatrix
install.packages("devtools")
library("devtools")
install_github('alastair-JL/StochasticCIB')
library(StochasticCIB)
help("StochasticCIB")
help("StochasticCIB")
help("TransitionCalculators")
help("CIBTransitionCalculators")
quit()
prefixes=c("~/UtilityPrograms/GLEAM/GLEAMviz-6.9-data/sims/Rio/Sim1",
"~/UtilityPrograms/GLEAM/GLEAMviz-6.9-data/sims/Rio/Sim2",
"~/UtilityPrograms/GLEAM/GLEAMviz-6.9-data/sims/Rio/Sim3",
"~/UtilityPrograms/GLEAM/GLEAMviz-6.9-data/sims/Rio/Sim4",
"~/UtilityPrograms/GLEAM/GLEAMviz-6.9-data/sims/Rio/Sim5")
multiCountryList=data.frame()
multiArriveList=data.frame()
for (ppp in 1:length(prefixes))
{
prefix=prefixes[ppp]
suffix="-0.tsv"
maxValue=213
arrivalTimes=data.frame()
md_countries <- read.delim(paste0(prefix,"/md_countries.tsv"), header=FALSE, comment.char="#")
md_countries[,3]=as.character(md_countries[,2])
Select= (md_countries[,2]=="")
#Select=is.na(Select)
md_countries[Select,3]=as.character(md_countries[Select,1])
for(iii in 0:213)
{
filename= paste0(prefix,"/countries/",as.character(iii),suffix)
current <- read.delim(filename, header=FALSE, comment.char="#")
arrivalTimes[iii+1,1]=iii;
arrivalTimes[iii+1,2]=sum(current[,3]==0);
arrivalTimes[iii+1,3]=md_countries[iii+1,3];
}
write.csv(arrivalTimes,paste0(prefix,"/ArrivalTimes.csv"), row.names = FALSE)
multiCountryList[,ppp]=arrivalTimes[,3]
multiArriveList[,ppp]=arrivalTimes[,2]
}
multiArriveList[,length(prefixes)+1]=arrivalTimes[,3]
write.csv(multiArriveList,paste0(prefix,"~/UtilityPrograms/GLEAM/GLEAMviz-6.9-data/sims/Rio/MultiArrivalTimes.csv"), row.names = FALSE)
prefixes=c("~/UtilityPrograms/GLEAM/GLEAMviz-6.9-data/sims/Rio/Sim1",
"~/UtilityPrograms/GLEAM/GLEAMviz-6.9-data/sims/Rio/Sim2",
"~/UtilityPrograms/GLEAM/GLEAMviz-6.9-data/sims/Rio/Sim3",
"~/UtilityPrograms/GLEAM/GLEAMviz-6.9-data/sims/Rio/Sim4",
"~/UtilityPrograms/GLEAM/GLEAMviz-6.9-data/sims/Rio/Sim5")
multiCountryList=data.frame()
multiArriveList=data.frame()
for (ppp in 1:length(prefixes))
{
prefix=prefixes[ppp]
suffix="-0.tsv"
maxValue=213
arrivalTimes=data.frame()
md_countries <- read.delim(paste0(prefix,"/md_countries.tsv"), header=FALSE, comment.char="#")
md_countries[,3]=as.character(md_countries[,2])
Select= (md_countries[,2]=="")
#Select=is.na(Select)
md_countries[Select,3]=as.character(md_countries[Select,1])
for(iii in 0:213)
{
filename= paste0(prefix,"/countries/",as.character(iii),suffix)
current <- read.delim(filename, header=FALSE, comment.char="#")
arrivalTimes[iii+1,1]=iii;
arrivalTimes[iii+1,2]=sum(current[,3]==0);
arrivalTimes[iii+1,3]=md_countries[iii+1,3];
}
write.csv(arrivalTimes,paste0(prefix,"/ArrivalTimes.csv"), row.names = FALSE)
multiCountryList[,ppp]=arrivalTimes[,3]
multiArriveList[,ppp]=arrivalTimes[,2]
}
multiArriveList[,length(prefixes)+1]=arrivalTimes[,3]
install_github('alastair-JL/StochasticCIB')multiArriveList[,ppp]=arrivalTimes[,2]
multiArriveList[,ppp]=arrivalTimes[,2]
multiArriveList[,ppp]=arrivalTimes[,2]
SomewhereLand <- read.csv("~/Documents/RProjects/StochasticCIB/data/SomewhereLand.csv", header=FALSE)
View(SomewhereLand)
SomewhereLand <- read.csv("~/Documents/RProjects/StochasticCIB/data/SomewhereLand.csv", row.names=1)
View(SomewhereLand)
shape<-[3,3,3,2,3,3]
shape<-c(3,3,3,2,3,3)
SomewhereData<-list(SomewhereLand,shape)
SomewhereData[[1]]
SomewhereData[[2]]
save(SomewhereData,"SomewhereData.rda")
save("SomewhereData.rda",SomewhereData)
save(SomewhereData,file="SomewhereData.rda")
setwd("~/Documents/RProjects/StochasticCIB")
document()
install.packages("devtools")
library("devtools")
install_github('alastair-JL/StochasticCIB')
library(StochasticCIB)
help("StochasticCIB")
document()
