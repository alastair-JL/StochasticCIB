library("devtools")
library(roxygen2)
document()
document()
document()
document()
document()
document()
document()
document()
setwd("..")
install("StochasticCIB")
document()
setwd("StochasticCIB") ##Change this line.
document()
setwd("..")
install("StochasticCIB")
help(InputCibBanner)
library("devtools")
library(roxygen2)
document()
setwd("..")
install("StochasticCIB")
help(TransToMax)
help(devtools)
help(CIBTranstionsCalculators)
help(CIBTranstionsCalculator)
help(InputCibBanner)
library("devtools")
library(roxygen2)
setwd("StochasticCIB") ##Change this line.
document()
document()
document()
document()
setwd("..")
install("StochasticCIB")
setwd("StochasticCIB") ##Change this line.
document()
document()
setwd("..")
install("StochasticCIB")
help(InputCibBanner)
antCIB=InputCibBanner()
antCIB
setwd("StochasticCIB")
save(antCIB, "data\antCIB.rda")
save(antCIB, "data/antCIB.rda")
setwd("data")
save(antCIB, "antCIB.rda")
help(save)
save(antCIB, file="antCIB.rda")
load(file="antCIB")
load(file="antCIB.rda")
view(antCIB)
antCIB
TransRelAdj<-MakeScoreMatrix(antCIB)
TransRelAdj
Adjacency<-TransRelAdj[[3]]
View(Adjacency)
Scores<-TransRelAdj[[2]]
View(Scores)
data(antCIB)
data("antCIB")
setwd("..")
setwd("..")
setwd("StochasticCIB") ##Change this line.
document()
document()
document()
help(data)
data()
data(CO2)
data("DNase")
document()
document()
document()
setwd("..")
install("StochasticCIB")
help(InputCibBanner)
library("devtools")
library(roxygen2)
setwd("StochasticCIB") ##Change this line.
document()
setwd("..")
install("StochasticCIB")
help(InputCibBanner)
data(antCIB)
help(antCIB)
help(TransToMaxAdj)
example(TransToMaxAdj)
example(TransToMaxAdj)
library("devtools")
library(roxygen2)
install_github('alastair-JL/StochasticCIB')
help(StochasticCIB)
help(antCIB)
library(StochasticCIB)
help(antCIB)
help(StochasticCIB)
help(StochasticCIB)
library("devtools")
library(roxygen2)
install_github('alastair-JL/StochasticCIB')
library(StochasticCIB)
help(StochasticCIB) ##Here
library(StochasticCIB)
install_github('alastair-JL/StochasticCIB')
library("devtools")
library(roxygen2)
install_github('alastair-JL/StochasticCIB')
library(StochasticCIB)
help(StochasticCIB) ##Here
data(antCIB)
Transitions<- TransToMaxAdj(antCIB)
antCIB
MakeScoreMatrix(antCIB)
MakeScoreMatrix(antCIB)
MakeScoreMatrix<-function(TheList){
CrossImpactMatrix<-TheList[[1]]
listName<-colnames(CrossImpactMatrix)
CIBshape<- TheList[[2]]
NumDesc<-length(CIBshape)
shapeOffest<-c(0,cumsum(CIBshape)[-NumDesc])
shapemultiplier<-c(1,cumprod(CIBshape)[-NumDesc])
CurrentState<-CIBshape
targetState<-CIBshape
numWorldState<-prod(CIBshape)
Transitions<-mat.or.vec(numWorldState,numWorldState)
RelativeScores<-mat.or.vec(numWorldState,numWorldState)
AdjacentMatrix<-mat.or.vec(numWorldState,numWorldState)
WorldStateNames<- c("blank")
Counter<-0
TargCounter<-0
while(Counter<numWorldState){
Counter=Counter+1
CurrentState[1]<- CurrentState[1]+1
while( any(CurrentState>CIBshape) ){
CurrentState<-CurrentState+c(0,(CurrentState>CIBshape)[-NumDesc]) -(CurrentState>CIBshape)*CIBshape
}
nextname=paste(listName[CurrentState+shapeOffest],sep=" ")
WorldStateNames<- c(WorldStateNames,nextname)
##Okay, so we've identified the current state, and now need to determine its transitions.
targetState<-CIBshape
TargCounter<-0
while(TargCounter<numWorldState){
TargCounter=TargCounter+1
targetState[1]<- targetState[1]+1
while( any(targetState>CIBshape) ){
targetState<-targetState+c(0,(targetState>CIBshape)[-NumDesc]) -(targetState>CIBshape)*CIBshape
}
##Okay, currently scanning through all possible target states. A particular target state has been choosen. Cool
RelativeScores[Counter,TargCounter]<-(sum(CrossImpactMatrix[CurrentState+shapeOffest ,targetState+shapeOffest] ) )
AdjacentMatrix[Counter,TargCounter]<-sum((sum(targetState!=CurrentState)==1)*(targetState!=CurrentState)*(1:NumDesc)) -(sum(targetState!=CurrentState)>1)
}
}
WorldStateNames=WorldStateNames[-1]
rownames(Transitions)<-WorldStateNames
rownames(RelativeScores)<-WorldStateNames
rownames(AdjacentMatrix)<-WorldStateNames
colnames(Transitions)<-WorldStateNames
colnames(RelativeScores)<-WorldStateNames
colnames(AdjacentMatrix)<-WorldStateNames
ReturnList<- list(Transitions,RelativeScores,AdjacentMatrix)
}
MakeScoreMatrix(antCIB)
TheList<-antCIB
CrossImpactMatrix<-TheList[[1]]
listName<-colnames(CrossImpactMatrix)
CIBshape<- TheList[[2]]
NumDesc<-length(CIBshape)
shapeOffest<-c(0,cumsum(CIBshape)[-NumDesc])
shapemultiplier<-c(1,cumprod(CIBshape)[-NumDesc])
CurrentState<-CIBshape
targetState<-CIBshape
numWorldState<-prod(CIBshape)
Transitions<-mat.or.vec(numWorldState,numWorldState)
RelativeScores<-mat.or.vec(numWorldState,numWorldState)
AdjacentMatrix<-mat.or.vec(numWorldState,numWorldState)
WorldStateNames<- c("blank")
Counter<-0
TargCounter<-0
Counter=Counter+1
CurrentState[1]<- CurrentState[1]+1
while( any(CurrentState>CIBshape) ){
CurrentState<-CurrentState+c(0,(CurrentState>CIBshape)[-NumDesc]) -(CurrentState>CIBshape)*CIBshape
}
nextname=paste(listName[CurrentState+shapeOffest],sep=" ")
nextname=paste(listName[CurrentState+shapeOffest],sep=" ")
paste(nextname)
paste(nextname,collapse="")
nextname=paste(listName[CurrentState+shapeOffest],sep=" ",collapse=" ")
WorldStateNames<- c(WorldStateNames,nextname)
MakeScoreMatrix<-function(TheList){
CrossImpactMatrix<-TheList[[1]]
listName<-colnames(CrossImpactMatrix)
CIBshape<- TheList[[2]]
NumDesc<-length(CIBshape)
shapeOffest<-c(0,cumsum(CIBshape)[-NumDesc])
shapemultiplier<-c(1,cumprod(CIBshape)[-NumDesc])
CurrentState<-CIBshape
targetState<-CIBshape
numWorldState<-prod(CIBshape)
Transitions<-mat.or.vec(numWorldState,numWorldState)
RelativeScores<-mat.or.vec(numWorldState,numWorldState)
AdjacentMatrix<-mat.or.vec(numWorldState,numWorldState)
WorldStateNames<- c("blank")
Counter<-0
TargCounter<-0
while(Counter<numWorldState){
Counter=Counter+1
CurrentState[1]<- CurrentState[1]+1
while( any(CurrentState>CIBshape) ){
CurrentState<-CurrentState+c(0,(CurrentState>CIBshape)[-NumDesc]) -(CurrentState>CIBshape)*CIBshape
}
nextname=paste(listName[CurrentState+shapeOffest],sep=" ",collapse=" ")
WorldStateNames<- c(WorldStateNames,nextname)
##Okay, so we've identified the current state, and now need to determine its transitions.
targetState<-CIBshape
TargCounter<-0
while(TargCounter<numWorldState){
TargCounter=TargCounter+1
targetState[1]<- targetState[1]+1
while( any(targetState>CIBshape) ){
targetState<-targetState+c(0,(targetState>CIBshape)[-NumDesc]) -(targetState>CIBshape)*CIBshape
}
##Okay, currently scanning through all possible target states. A particular target state has been choosen. Cool
RelativeScores[Counter,TargCounter]<-(sum(CrossImpactMatrix[CurrentState+shapeOffest ,targetState+shapeOffest] ) )
AdjacentMatrix[Counter,TargCounter]<-sum((sum(targetState!=CurrentState)==1)*(targetState!=CurrentState)*(1:NumDesc)) -(sum(targetState!=CurrentState)>1)
}
}
WorldStateNames=WorldStateNames[-1]
rownames(Transitions)<-WorldStateNames
rownames(RelativeScores)<-WorldStateNames
rownames(AdjacentMatrix)<-WorldStateNames
colnames(Transitions)<-WorldStateNames
colnames(RelativeScores)<-WorldStateNames
colnames(AdjacentMatrix)<-WorldStateNames
ReturnList<- list(Transitions,RelativeScores,AdjacentMatrix)
}
MakeScoreMatrix(antCIB)
MakeScoreMatrix(antCIB)
bob<-MakeScoreMatrix(antCIB)
bob
