install.packages("bookdown")
library("devtools")
install_github('alastair-JL/StochasticCIB')
library(StochasticCIB)
help("StochasticCIB")
data(ExampleCIBdata)
boltzTrans<-LocalBoltzmann(ExampleCIBdata)
forecast<- CIBforecast(boltzTrans)
boltzTrans<-LocalBoltzmann(ExampleCIBdata)
boltzTrans
help LocalBoltzmann
help(LocalBoltzmann)
CIBpaintGraph(boltzTrans,forecast[[1]],2)
CIBGraph(boltzTrans,forecast[[1]],2)
data(ExampleCIBdata)
TransScoresAdj<-MakeScoreMatrix(ExampleCIBdata)
Scores<-TransScoresAdj[[2]]
Adjacency<-TransScoresAdj[[3]]
Scores["Pop-M $$$-H Edu-M",]
Scores[3,]
boltzTrans
help("CIBgraph")
CIBgraph()
CIBgraph(boltzTrans)
graph_from_adjacency_matrix
igraph::graph_from_adjacency_matrix
graph_from_adjacency_matrix
igraph::graph_from_adjacency_matrix
library(igraph)
graph_from_adjacency_matrix
CIBgraph(boltzTrans)
CIBpaintGraph(boltzTrans,forecast[[1]])
CIBGraph(boltzTrans,forecast[[1]],2)
CIBgraph(boltzTrans,forecast[[1]],2)
forecast<- CIBforecast(boltzTrans)
CIBforecast
cd
cd("dsf")
setwd("/home/babblefish/Documents/RProjects/StochasticCIB")
package(StochasticCIB)
using(StochasticCIB)
library(StochasticCIB)
help("StochasticCIB")
data(ExampleCIBdata)
boltzTrans<-LocalBoltzmann(ExampleCIBdata)
forecast<- CIBforecast(boltzTrans)
LocalBoltzmann(ExampleCIBdata)
View(boltzTrans)
CIBforecast(boltzTrans)
CIBforecast
CIBforecast<-function(Transitions){
Eigs<-eigen(t(Transitions))
if(abs(prod((Eigs[[1]])))>10^-8){
Eigs<-Re(Eigs[[2]]%*%((Re(Eigs[[1]])>(1-10^-6))*solve(Eigs[[2]], (rep(1, nrow(Transitions))))))
}else{
Eigs<-(rep(1, nrow(Transitions)));
for(iii in 1:500){
Eigs<-t(Transitions)%*%Eigs;
}
Eigs<-(t(Transitions)%*%Eigs + Eigs)/2;
Eigs<-(t(Transitions)%*%Eigs + Eigs)/2;
Eigs<-(t(Transitions)%*%Eigs + Eigs)/2;
Eigs<-(t(Transitions)%*%Eigs + Eigs)/2; #blur cycles a bit, so that Periodicity has small impact on our thing.
}
rownames(Eigs)<-colnames(Transitions)
colnames(Eigs)<-c('')
Entropy<- -colSums(Eigs*log(Eigs + 10^-100))
Entropy<-Entropy[[1]]
EntropyProduction<- -colSums(Eigs*rowSums(Transitions*log(Transitions+10^-100)))
EntropyProduction<-EntropyProduction[[1]]
ReturnList<- list(Eigs,Entropy,EntropyProduction)
}
CIBforecast(boltzTrans)
CIBpaintGraph(boltzTrans,forecast[[1]])
CIBGraph(boltzTrans,forecast[[1]])
CIBgraph<-function(Transitions,weight=NULL,target=1,cutoffMultiplier=10^-4,layout=layout_with_dh){
network <- graph_from_adjacency_matrix(Transitions , mode='directed', diag=T,weighted=T)
if(nrow(Transitions)!=ncol(Transitions)){
error("Transition matrix must be square. What are you doing?")
}
if(is.null(weight)||nrow(weight)!=nrow(Transitions)){
weight=rep(15,nrow(Transitions));
}else{
weight<-log(weight+10^-10);
weight<- -sqrt(max(weight)-weight)
weight<- 16*weight/max(abs(weight))+26
weight<-as.numeric(t(weight))
}
names=colnames(Transitions)
carac=c(substr(names,target,target))
nodes <- data.frame(names,carac,weight,stringsAsFactors =F)
linkRow= c()
linkCol= c()
linkThk= c()
linkHex=c()
grays<- gray.colors(50, start = 0.75, end = 0.25)
cutOff<-sum(Transitions)/ncol(Transitions)*cutoffMultiplier
for(iii in 1:nrow(Transitions)){
for(jjj in 1:nrow(Transitions)){
if(Transitions[iii,jjj]>cutOff){
linkRow<-c(linkRow,nodes$names[iii])
linkCol<-c(linkCol,nodes$names[jjj])
linkThk<-c(linkThk,3-2.6*exp(-4*Transitions[iii,jjj]/max(Transitions)))
linkHex<-c(linkHex,grays[floor(49.9*(Transitions[iii,jjj]/max(Transitions)))+1])
}
}
}
links<- data.frame(linkRow,linkCol,linkThk,stringsAsFactors =F)
network <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
layout_nicely(network, dim = 2)
coul  <- c("#88CC44","#4488CC","#CC4488","#CC8844","#44CC88","#8844CC","#22EE22","#2222EE","#EE2222")
# Create a vector of color
my_color <- coul[as.numeric(as.factor(V(network)$carac))]
plot(network,vertex.size=weight, vertex.color=my_color,
vertex.label.cex=weight/20, vertex.label.family="Ariel",
edge.width=linkThk, edge.curved=0.25,    edge.arrow.size=0.8,                            # Arrow size, defaults to 1
edge.arrow.width=0.8, edge.color=linkHex,loop.angle=0.5,layout=layout )
}
CIBGraph(boltzTrans,forecast[[1]])
CIBgraph(boltzTrans,forecast[[1]])
graph_from_adjacency_matrix()
igraph::graph_from_adjacency_matrix()
CIBgraph<-function(Transitions,weight=NULL,target=1,cutoffMultiplier=10^-4,layout=layout_with_dh){
network <- igraph::graph_from_adjacency_matrix(Transitions , mode='directed', diag=T,weighted=T)
if(nrow(Transitions)!=ncol(Transitions)){
error("Transition matrix must be square. What are you doing?")
}
if(is.null(weight)||nrow(weight)!=nrow(Transitions)){
weight=rep(15,nrow(Transitions));
}else{
weight<-log(weight+10^-10);
weight<- -sqrt(max(weight)-weight)
weight<- 16*weight/max(abs(weight))+26
weight<-as.numeric(t(weight))
}
names=colnames(Transitions)
carac=c(substr(names,target,target))
nodes <- data.frame(names,carac,weight,stringsAsFactors =F)
linkRow= c()
linkCol= c()
linkThk= c()
linkHex=c()
grays<- gray.colors(50, start = 0.75, end = 0.25)
cutOff<-sum(Transitions)/ncol(Transitions)*cutoffMultiplier
for(iii in 1:nrow(Transitions)){
for(jjj in 1:nrow(Transitions)){
if(Transitions[iii,jjj]>cutOff){
linkRow<-c(linkRow,nodes$names[iii])
linkCol<-c(linkCol,nodes$names[jjj])
linkThk<-c(linkThk,3-2.6*exp(-4*Transitions[iii,jjj]/max(Transitions)))
linkHex<-c(linkHex,grays[floor(49.9*(Transitions[iii,jjj]/max(Transitions)))+1])
}
}
}
links<- data.frame(linkRow,linkCol,linkThk,stringsAsFactors =F)
network <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
layout_nicely(network, dim = 2)
coul  <- c("#88CC44","#4488CC","#CC4488","#CC8844","#44CC88","#8844CC","#22EE22","#2222EE","#EE2222")
# Create a vector of color
my_color <- coul[as.numeric(as.factor(V(network)$carac))]
plot(network,vertex.size=weight, vertex.color=my_color,
vertex.label.cex=weight/20, vertex.label.family="Ariel",
edge.width=linkThk, edge.curved=0.25,    edge.arrow.size=0.8,                            # Arrow size, defaults to 1
edge.arrow.width=0.8, edge.color=linkHex,loop.angle=0.5,layout=layout )
}
CIBgraph(boltzTrans,forecast[[1]])
forecast<-CIBforecast(boltzTrans)
CIBgraph(boltzTrans,forecast[[1]])
CIBgraph<-function(Transitions,weight=NULL,target=1,cutoffMultiplier=10^-4,layout=layout_with_dh){
network <- igraph::graph_from_adjacency_matrix(Transitions , mode='directed', diag=T,weighted=T)
if(nrow(Transitions)!=ncol(Transitions)){
error("Transition matrix must be square. What are you doing?")
}
if(is.null(weight)||nrow(weight)!=nrow(Transitions)){
weight=rep(15,nrow(Transitions));
}else{
weight<-log(weight+10^-10);
weight<- -sqrt(max(weight)-weight)
weight<- 16*weight/max(abs(weight))+26
weight<-as.numeric(t(weight))
}
names=colnames(Transitions)
carac=c(substr(names,target,target))
nodes <- data.frame(names,carac,weight,stringsAsFactors =F)
linkRow= c()
linkCol= c()
linkThk= c()
linkHex=c()
grays<- gray.colors(50, start = 0.75, end = 0.25)
cutOff<-sum(Transitions)/ncol(Transitions)*cutoffMultiplier
for(iii in 1:nrow(Transitions)){
for(jjj in 1:nrow(Transitions)){
if(Transitions[iii,jjj]>cutOff){
linkRow<-c(linkRow,nodes$names[iii])
linkCol<-c(linkCol,nodes$names[jjj])
linkThk<-c(linkThk,3-2.6*exp(-4*Transitions[iii,jjj]/max(Transitions)))
linkHex<-c(linkHex,grays[floor(49.9*(Transitions[iii,jjj]/max(Transitions)))+1])
}
}
}
links<- data.frame(linkRow,linkCol,linkThk,stringsAsFactors =F)
network <- igraph::graph_from_data_frame(d=links, vertices=nodes, directed=T)
layout_nicely(network, dim = 2)
coul  <- c("#88CC44","#4488CC","#CC4488","#CC8844","#44CC88","#8844CC","#22EE22","#2222EE","#EE2222")
# Create a vector of color
my_color <- coul[as.numeric(as.factor(V(network)$carac))]
plot(network,vertex.size=weight, vertex.color=my_color,
vertex.label.cex=weight/20, vertex.label.family="Ariel",
edge.width=linkThk, edge.curved=0.25,    edge.arrow.size=0.8,                            # Arrow size, defaults to 1
edge.arrow.width=0.8, edge.color=linkHex,loop.angle=0.5,layout=layout )
}
CIBgraph(boltzTrans,forecast[[1]])
CIBgraph<-function(Transitions,weight=NULL,target=1,cutoffMultiplier=10^-4,layout=layout_with_dh){
network <- igraph::graph_from_adjacency_matrix(Transitions , mode='directed', diag=T,weighted=T)
if(nrow(Transitions)!=ncol(Transitions)){
error("Transition matrix must be square. What are you doing?")
}
if(is.null(weight)||nrow(weight)!=nrow(Transitions)){
weight=rep(15,nrow(Transitions));
}else{
weight<-log(weight+10^-10);
weight<- -sqrt(max(weight)-weight)
weight<- 16*weight/max(abs(weight))+26
weight<-as.numeric(t(weight))
}
names=colnames(Transitions)
carac=c(substr(names,target,target))
nodes <- data.frame(names,carac,weight,stringsAsFactors =F)
linkRow= c()
linkCol= c()
linkThk= c()
linkHex=c()
grays<- gray.colors(50, start = 0.75, end = 0.25)
cutOff<-sum(Transitions)/ncol(Transitions)*cutoffMultiplier
for(iii in 1:nrow(Transitions)){
for(jjj in 1:nrow(Transitions)){
if(Transitions[iii,jjj]>cutOff){
linkRow<-c(linkRow,nodes$names[iii])
linkCol<-c(linkCol,nodes$names[jjj])
linkThk<-c(linkThk,3-2.6*exp(-4*Transitions[iii,jjj]/max(Transitions)))
linkHex<-c(linkHex,grays[floor(49.9*(Transitions[iii,jjj]/max(Transitions)))+1])
}
}
}
links<- data.frame(linkRow,linkCol,linkThk,stringsAsFactors =F)
network <- igraph::graph_from_data_frame(d=links, vertices=nodes, directed=T)
igraph::layout_nicely(network, dim = 2)
coul  <- c("#88CC44","#4488CC","#CC4488","#CC8844","#44CC88","#8844CC","#22EE22","#2222EE","#EE2222")
# Create a vector of color
my_color <- coul[as.numeric(as.factor(V(network)$carac))]
plot(network,vertex.size=weight, vertex.color=my_color,
vertex.label.cex=weight/20, vertex.label.family="Ariel",
edge.width=linkThk, edge.curved=0.25,    edge.arrow.size=0.8,                            # Arrow size, defaults to 1
edge.arrow.width=0.8, edge.color=linkHex,loop.angle=0.5,layout=layout )
}
CIBgraph(boltzTrans,forecast[[1]])
Transitions<-boltzTrans
weight=forecast[[1]]
network <- igraph::graph_from_adjacency_matrix(Transitions , mode='directed', diag=T,weighted=T)
if(nrow(Transitions)!=ncol(Transitions)){
error("Transition matrix must be square. What are you doing?")
}
if(is.null(weight)||nrow(weight)!=nrow(Transitions)){
weight=rep(15,nrow(Transitions));
}else{
weight<-log(weight+10^-10);
weight<- -sqrt(max(weight)-weight)
weight<- 16*weight/max(abs(weight))+26
weight<-as.numeric(t(weight))
}
names=colnames(Transitions)
carac=c(substr(names,target,target))
target=1,cutoffMultiplier=10^-4,layout=layout_with_dh
target=1
cutoffMultiplier=10^-4
layout=layout_with_dh
target=1
cutoffMultiplier=10^-4
layout=igraph::layout_with_dh
network <- igraph::graph_from_adjacency_matrix(Transitions , mode='directed', diag=T,weighted=T)
if(nrow(Transitions)!=ncol(Transitions)){
error("Transition matrix must be square. What are you doing?")
}
if(is.null(weight)||nrow(weight)!=nrow(Transitions)){
weight=rep(15,nrow(Transitions));
}else{
weight<-log(weight+10^-10);
weight<- -sqrt(max(weight)-weight)
weight<- 16*weight/max(abs(weight))+26
weight<-as.numeric(t(weight))
}
if(is.null(weight)||nrow(weight)!=nrow(Transitions)){
weight=rep(15,nrow(Transitions));
}else{
weight<-log(weight+10^-10);
weight<- -sqrt(max(weight)-weight)
weight<- 16*weight/max(abs(weight))+26
weight<-as.numeric(t(weight))
}
s.null(weight)
is.null(weight)
nrow(weight)!=nrow(Transitions)
nrow(Transitions)
nrow(weight)
is.null(weight)|nrow(weight)!=nrow(Transitions)
is.null(weight)
weight
nrow(weight)
help(nrow)
NROW(weight)
if(is.null(weight)|NROW(weight)!=NROW(Transitions)){
weight=rep(15,nrow(Transitions));
}else{
weight<-log(weight+10^-10);
weight<- -sqrt(max(weight)-weight)
weight<- 16*weight/max(abs(weight))+26
weight<-as.numeric(t(weight))
}
names=colnames(Transitions)
carac=c(substr(names,target,target))
nodes <- data.frame(names,carac,weight,stringsAsFactors =F)
linkRow= c()
linkCol= c()
linkThk= c()
linkHex=c()
grays<- gray.colors(50, start = 0.75, end = 0.25)
cutOff<-sum(Transitions)/ncol(Transitions)*cutoffMultiplier
for(iii in 1:nrow(Transitions)){
for(jjj in 1:nrow(Transitions)){
if(Transitions[iii,jjj]>cutOff){
linkRow<-c(linkRow,nodes$names[iii])
linkCol<-c(linkCol,nodes$names[jjj])
linkThk<-c(linkThk,3-2.6*exp(-4*Transitions[iii,jjj]/max(Transitions)))
linkHex<-c(linkHex,grays[floor(49.9*(Transitions[iii,jjj]/max(Transitions)))+1])
}
}
}
links<- data.frame(linkRow,linkCol,linkThk,stringsAsFactors =F)
network <- igraph::graph_from_data_frame(d=links, vertices=nodes, directed=T)
igraph::layout_nicely(network, dim = 2)
coul  <- c("#88CC44","#4488CC","#CC4488","#CC8844","#44CC88","#8844CC","#22EE22","#2222EE","#EE2222")
# Create a vector of color
my_color <- coul[as.numeric(as.factor(V(network)$carac))]
my_color <- coul[as.numeric(as.factor(V(network)$carac))]
network
igraph::V
my_color <- coul[as.numeric(as.factor(igraph::V(network)$carac))]
plot(network,vertex.size=weight, vertex.color=my_color,
vertex.label.cex=weight/20, vertex.label.family="Ariel",
edge.width=linkThk, edge.curved=0.25,    edge.arrow.size=0.8,                            # Arrow size, defaults to 1
edge.arrow.width=0.8, edge.color=linkHex,loop.angle=0.5,layout=layout )
plot(network,vertex.size=weight, vertex.color=my_color,
vertex.label.cex=weight/20, vertex.label.family="Ariel",
edge.width=linkThk, edge.curved=0.25,    edge.arrow.size=0.8,                            # Arrow size, defaults to 1
edge.arrow.width=0.8, edge.color=linkHex,loop.angle=0.5,layout=layout )
plot(network,vertex.size=weight, vertex.color=my_color,
vertex.label.cex=weight/20, vertex.label.family="Ariel",
edge.width=linkThk, edge.curved=0.25,    edge.arrow.size=0.8,                            # Arrow size, defaults to 1
edge.arrow.width=0.8, edge.color=linkHex,loop.angle=0.5,layout=layout )
CIBgraph<-function(Transitions,weight=NULL,target=1,cutoffMultiplier=10^-4,layout=igraph::layout_with_dh){
network <- igraph::graph_from_adjacency_matrix(Transitions , mode='directed', diag=T,weighted=T)
if(nrow(Transitions)!=ncol(Transitions)){
error("Transition matrix must be square. What are you doing?")
}
if(is.null(weight)|NROW(weight)!=NROW(Transitions)){
weight=rep(15,nrow(Transitions));
}else{
weight<-log(weight+10^-10);
weight<- -sqrt(max(weight)-weight)
weight<- 16*weight/max(abs(weight))+26
weight<-as.numeric(t(weight))
}
names=colnames(Transitions)
carac=c(substr(names,target,target))
nodes <- data.frame(names,carac,weight,stringsAsFactors =F)
linkRow= c()
linkCol= c()
linkThk= c()
linkHex=c()
grays<- gray.colors(50, start = 0.75, end = 0.25)
cutOff<-sum(Transitions)/ncol(Transitions)*cutoffMultiplier
for(iii in 1:nrow(Transitions)){
for(jjj in 1:nrow(Transitions)){
if(Transitions[iii,jjj]>cutOff){
linkRow<-c(linkRow,nodes$names[iii])
linkCol<-c(linkCol,nodes$names[jjj])
linkThk<-c(linkThk,3-2.6*exp(-4*Transitions[iii,jjj]/max(Transitions)))
linkHex<-c(linkHex,grays[floor(49.9*(Transitions[iii,jjj]/max(Transitions)))+1])
}
}
}
links<- data.frame(linkRow,linkCol,linkThk,stringsAsFactors =F)
network <- igraph::graph_from_data_frame(d=links, vertices=nodes, directed=T)
igraph::layout_nicely(network, dim = 2)
coul  <- c("#88CC44","#4488CC","#CC4488","#CC8844","#44CC88","#8844CC","#22EE22","#2222EE","#EE2222")
# Create a vector of color
my_color <- coul[as.numeric(as.factor(igraph::V(network)$carac))]
plot(network,vertex.size=weight, vertex.color=my_color,
vertex.label.cex=weight/20, vertex.label.family="Ariel",
edge.width=linkThk, edge.curved=0.25,    edge.arrow.size=0.8,                            # Arrow size, defaults to 1
edge.arrow.width=0.8, edge.color=linkHex,loop.angle=0.5,layout=layout )
}
CIBgraph(boltzTrans,forecast[[1]])
CIBgraph(boltzTrans,forecast[[1]],2)
CIBgraph(boltzTrans,forecast[[1]],3)
CIBgraph(boltzTrans,forecast[[1]],3)
CIBgraph(boltzTrans,forecast[[1]],3)
CIBgraph(boltzTrans,forecast[[1]],3)
CIBgraph(boltzTrans,forecast[[1]],4)
CIBgraph(boltzTrans,forecast[[1]],2)
plot(network,vertex.size=weight, vertex.color=my_color,
vertex.label.cex=weight/30, vertex.label.family="Ariel",
edge.width=linkThk, edge.curved=0.25,    edge.arrow.size=0.8,                            # Arrow size, defaults to 1
edge.arrow.width=0.8, edge.color=linkHex,loop.angle=0.85,layout=layout )
plot(network,vertex.size=weight, vertex.color=my_color,
vertex.label.cex=weight/25, vertex.label.family="Ariel",
edge.width=linkThk, edge.curved=0.25,    edge.arrow.size=0.8,                            # Arrow size, defaults to 1
edge.arrow.width=0.8, edge.color=linkHex,loop.angle=0.85,layout=layout )
plot(network,vertex.size=weight, vertex.color=my_color,
vertex.label.cex=weight/27, vertex.label.family="Ariel",
edge.width=linkThk, edge.curved=0.25,    edge.arrow.size=0.8,                            # Arrow size, defaults to 1
edge.arrow.width=0.8, edge.color=linkHex,loop.angle=0.85,layout=layout )
plot(network,vertex.size=weight, vertex.color=my_color,
vertex.label.cex=weight/27, vertex.label.family="Ariel",
edge.width=linkThk, edge.curved=0.35,    edge.arrow.size=0.8,                            # Arrow size, defaults to 1
edge.arrow.width=0.8, edge.color=linkHex,loop.angle=0.85,layout=layout )
plot(network,vertex.size=weight, vertex.color=my_color,
vertex.label.cex=weight/27, vertex.label.family="Ariel",
edge.width=linkThk, edge.curved=0.35,    edge.arrow.size=0.8,                            # Arrow size, defaults to 1
edge.arrow.width=0.8, edge.color=linkHex,loop.angle=0.85,layout=layout )
plot(network,vertex.size=weight, vertex.color=my_color,
vertex.label.cex=weight/27, vertex.label.family="Ariel",
edge.width=linkThk, edge.curved=0.35,    edge.arrow.size=0.8,                            # Arrow size, defaults to 1
edge.arrow.width=0.8, edge.color=linkHex,loop.angle=0.85,layout=layout )
plot(network,vertex.size=weight, vertex.color=my_color,
vertex.label.cex=weight/27, vertex.label.family="Ariel",
edge.width=linkThk, edge.curved=0.35,    edge.arrow.size=0.8,                            # Arrow size, defaults to 1
edge.arrow.width=0.8, edge.color=linkHex,loop.angle=0.85,layout=layout )
CIBgraph<-function(Transitions,weight=NULL,target=1,cutoffMultiplier=10^-4,layout=igraph::layout_with_dh){
network <- igraph::graph_from_adjacency_matrix(Transitions , mode='directed', diag=T,weighted=T)
if(nrow(Transitions)!=ncol(Transitions)){
error("Transition matrix must be square. What are you doing?")
}
if(is.null(weight)|NROW(weight)!=NROW(Transitions)){
weight=rep(15,nrow(Transitions));
}else{
weight<-log(weight+10^-10);
weight<- -sqrt(max(weight)-weight)
weight<- 16*weight/max(abs(weight))+26
weight<-as.numeric(t(weight))
}
names=colnames(Transitions)
carac=c(substr(names,target,target))
nodes <- data.frame(names,carac,weight,stringsAsFactors =F)
linkRow= c()
linkCol= c()
linkThk= c()
linkHex=c()
grays<- gray.colors(50, start = 0.75, end = 0.25)
cutOff<-sum(Transitions)/ncol(Transitions)*cutoffMultiplier
for(iii in 1:nrow(Transitions)){
for(jjj in 1:nrow(Transitions)){
if(Transitions[iii,jjj]>cutOff){
linkRow<-c(linkRow,nodes$names[iii])
linkCol<-c(linkCol,nodes$names[jjj])
linkThk<-c(linkThk,3-2.6*exp(-4*Transitions[iii,jjj]/max(Transitions)))
linkHex<-c(linkHex,grays[floor(49.9*(Transitions[iii,jjj]/max(Transitions)))+1])
}
}
}
links<- data.frame(linkRow,linkCol,linkThk,stringsAsFactors =F)
network <- igraph::graph_from_data_frame(d=links, vertices=nodes, directed=T)
igraph::layout_nicely(network, dim = 2)
coul  <- c("#88CC44","#4488CC","#CC4488","#CC8844","#44CC88","#8844CC","#22EE22","#2222EE","#EE2222")
# Create a vector of color
my_color <- coul[as.numeric(as.factor(igraph::V(network)$carac))]
plot(network,vertex.size=weight, vertex.color=my_color,
vertex.label.cex=weight/27, vertex.label.family="Ariel",
edge.width=linkThk, edge.curved=0.35,    edge.arrow.size=0.8,                            # Arrow size, defaults to 1
edge.arrow.width=0.8, edge.color=linkHex,loop.angle=0.85,layout=layout )
}
CIBgraph(boltzTrans,forecast[[1]],2)
CIBpaintGraph(boltzTrans,forecast[[1]],2,10^-4,layout.grid)
CIBgraph(boltzTrans,forecast[[1]],2,10^-4,layout.grid)
CIBgraph(boltzTrans,forecast[[1]],2,10^-4,igraph::layout.grid)
igraph::layout
help(igraph::layout)
help("igraph::layout")
help("layout")
help("StochaticCIB")
help("StochaticCIB")
help("StochasticCIB")
InputCibBanner()
ans
InputCibBanner()
library(StochasticCIB)
InputCibBanner()
help("StochasticCIB")
data(ExampleCIBdata)
boltzTrans<-LocalBoltzmann(ExampleCIBdata)
forecast<- CIBforecast(boltzTrans)
CIBgraph(boltzTrans,forecast[[1]])
help("CIBgraph")
library(StochasticCIB)
help("StochasticCIB")
library(StochasticCIB)
help("StochasticCIB")
data(ExampleCIBdata)
boltzTrans<-LocalBoltzmann(ExampleCIBdata)
forecast<- CIBforecast(boltzTrans)
CIBpaintGraph(boltzTrans,forecast[[1]])
CIBgraph(boltzTrans,forecast[[1]])
